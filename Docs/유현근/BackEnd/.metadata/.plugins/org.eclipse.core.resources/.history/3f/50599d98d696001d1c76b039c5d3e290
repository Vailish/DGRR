package com.ssafy.b102.security;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.security.web.util.matcher.AntPathRequestMatcher;
import org.springframework.web.cors.CorsConfiguration;
import org.springframework.web.cors.reactive.UrlBasedCorsConfigurationSource;
import org.springframework.web.filter.CorsFilter;
import org.springframework.security.core.userdetails.UserDetailsService;
@Configuration
public class SecurityConfig {
	private final UserDetailsService userDetailsService = null;
	// 
	@Bean
	public BCryptPasswordEncoder bCryptPasswordEncoder() {
		return new BCryptPasswordEncoder(); // BCrypt 암호화 방식 사용
	}

	@Bean
	public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {
		http
		.authorizeRequests()
			.antMatchers("/", "/home", "/signUp").permitAll() // 설정한 리소스의 접근을 인증절차 없이 허용
			.anyRequest().authenticated() // 그 외 모든 리소스를 의미하며 인증 필요
			.and()
		.formLogin()
			.permitAll()
			.loginPage("/login") // 기본 로그인 페이지
			.and()
		.logout()
			.permitAll()
			// .logoutUrl("/logout") // 로그아웃 URL (기본 값 : /logout)
			// .logoutSuccessUrl("/login?logout") // 로그아웃 성공 URL (기본 값 : "/login?logout")
			.logoutRequestMatcher(new AntPathRequestMatcher("/logout")) // 주소창에 요청해도 포스트로 인식하여 로그아웃
			.deleteCookies("JSESSIONID") // 로그아웃 시 JSESSIONID 제거
			.invalidateHttpSession(true) // 로그아웃 시 세션 종료
			.clearAuthentication(true); // 로그아웃 시 권한 제거
	
	return http.build();
	}
}